print(paste("GC Content = ", GC_content))
GC_content=GC(dna[[2]])
print(paste("GC Content = ", GC_content))
print(round(GC_content,3))
# Reading fasta files with seqinr library
proseq=read.fasta(file="spike_multifasta.txt",seqtype="AA")
# Viewing file
file.show("spike_multifasta.txt")
View(proseq)
# Number of sequences
num_seq=length(proseq)
print("Number of sequences = ", num_seq)
# Number of sequences
num_seq=length(proseq)
print("Number of sequences = ", num_seq)
# Number of sequences
num_seq=length(proseq)
print("Number of sequences = ", num_seq)
num_seq=length(proseq)
print("Number of sequences = ", num_seq)
print(paste("Number of sequences = ",num_seq))
# Names of sequences
names=getName(proseq)
names
# Annotation of sequences
annotation <- getAnnot(proseq)
annotation
# Length of individual sequences
len_seq=getLength(proseq)
len_seq
# Protein statistics
print(AAstat(proseq[[1]]))
for (i in 1:num_seq)
{
cat(i,names[i],"\n")
print(AAstat(proseq[[i]]))
}
lseqinr()
library(seqinr)
getwd()
# Setting up the working directory
# setwd()
file.show("GAPDH_seq.txt")
# Reading a fasta file
dna=read.fasta(file="GAPDH_seq.txt", seqtype="DNA", forceDNAtolower = TRUE)
View(dna)
# Number of sequences
Number_of_sequences=length(dna)
cat("Number of sequences = ", Number_of_sequences)
# Names of sequences
names=getName(dna)
names
# Name of the nth sequence
names[[2]]
# Annotation of sequences
annotation=getAnnot(dna)
annotation
annotation[[1]]
annotation[[2]]
# Length of individua sequences
len_seq=getLength(dna)
len_seq
len_seq[[1]]
# Sequence
getSequence(dna)
seq1=getSequence(dna[[1]],as.string = TRUE)
seq1
dinucleotide_count=count(dna[[1]],2)
print(dinucleotide_count)
trinucleotide_count=count(dna[[2]],3)
print(trinucleotide_count)
# GC content
GC_content=GC(dna[[2]])
print(paste("GC Content = ", GC_content))
print(round(GC_content,3))
GC(dna[[1]])
GC(dna[[2]])
# Sliding window analysis for GC content
# Retrieve sequence as vector of nucleotides
seq1=getSequence(dna[[1]],as.string = TRUE)
print(seq1)
seq1=getSequence(dna[[1]],as.string = FALSE)
begin=1
gc=c()
count1=0
count2=0
length(seq1)
length(seq1)
while (begin < length(seq1)) # begin 1 end 500
{
end=begin+499 #500
if (end > length(seq1))
{
end=length(seq1)
count2=1
}
subsequence=seq1[begin:end]  #1:500
count1=count1+1
sub_GC=GC(subsequence)
gc[count1]=sub_GC
cat(begin,end,sub_GC, "\n")
if(count2==1)
{break}
begin=end-199 #begin = 500-199=301
}
print(gc)
library(seqinr)
getwd()
# Setting up the working directory
# setwd()
file.show("GAPDH_seq.txt")
# Reading a fasta file
dna=read.fasta(file="GAPDH_seq.txt", seqtype="DNA", forceDNAtolower = TRUE)
View(dna)
# Number of sequences
Number_of_sequences=length(dna)
cat("Number of sequences = ", Number_of_sequences)
# Names of sequences
names=getName(dna)
names
# Name of the nth sequence
names[[2]]
# Annotation of sequences
annotation=getAnnot(dna)
annotation
annotation[[1]]
annotation[[2]]
# Length of individua sequences
len_seq=getLength(dna)
len_seq
len_seq[[1]]
# Sequence
getSequence(dna)
seq1=getSequence(dna[[1]],as.string = TRUE)
seq1
dinucleotide_count=count(dna[[1]],2)
print(dinucleotide_count)
trinucleotide_count=count(dna[[2]],3)
print(trinucleotide_count)
# GC content
GC_content=GC(dna[[2]])
print(paste("GC Content = ", GC_content))
print(round(GC_content,3))
GC(dna[[1]])
GC(dna[[2]])
# Sliding window analysis for GC content
# Retrieve sequence as vector of nucleotides
seq1=getSequence(dna[[1]],as.string = TRUE)
print(seq1)
# gc=c()
# count1=count1+1 #gc index
# gc[count1]=subGC #filling up calculated gc fraction
seq1=getSequence(dna[[1]],as.string = FALSE)
begin=1
gc=c()
count1=0
count2=0
length(seq1)
while (begin < length(seq1)) # begin 1 end 500
{
end=begin+499 #500
if (end > length(seq1))
{
end=length(seq1)
count2=1
}
subsequence=seq1[begin:end]  #1:500
count1=count1+1
sub_GC=GC(subsequence)
gc[count1]=sub_GC
cat(begin,end,sub_GC, "\n")
if(count2==1)
{break}
begin=end-199 #begin = 500-199=301
}
print(gc)
# Loading the library
library(seqinr)
getwd()
# Setting up the working directory
# setwd()
file.show("GAPDH_seq.txt")
# Reading a fasta file
dna=read.fasta(file="GAPDH_seq.txt", seqtype="DNA", forceDNAtolower = TRUE)
View(dna)
# Number of sequences
Number_of_sequences=length(dna)
cat("Number of sequences = ", Number_of_sequences)
# Names of sequences
names=getName(dna)
names
# Name of the nth sequence
names[[2]]
# Annotation of sequences
annotation=getAnnot(dna)
annotation
annotation[[1]]
annotation[[2]]
# Length of individua sequences
len_seq=getLength(dna)
len_seq
len_seq[[1]]
# Sequence
getSequence(dna)
seq1=getSequence(dna[[1]],as.string = TRUE)
seq1
dinucleotide_count=count(dna[[1]],2)
print(dinucleotide_count)
trinucleotide_count=count(dna[[2]],3)
print(trinucleotide_count)
# GC content
GC_content=GC(dna[[2]])
print(paste("GC Content = ", GC_content))
print(round(GC_content,3))
GC(dna[[1]])
GC(dna[[2]])
# Sliding window analysis for GC content
# Retrieve sequence as vector of nucleotides
seq1=getSequence(dna[[1]],as.string = TRUE)
print(seq1)
# gc=c()
# count1=count1+1 #gc index
# gc[count1]=subGC #filling up calculated gc fraction
# For the first sequence
seq1=getSequence(dna[[1]],as.string = FALSE)
begin=1
gc=c()
count1=0
count2=0
length(seq1)
while (begin < length(seq1)) # begin 1 end 500
{
end=begin+499 #500
if (end > length(seq1))
{
end=length(seq1)
count2=1
}
subsequence=seq1[begin:end]  #1:500
count1=count1+1
sub_GC=GC(subsequence)
gc[count1]=sub_GC
cat(begin,end,sub_GC, "\n")
if(count2==1)
{break}
begin=end-199 #begin = 500-199=301
}
print(gc)
# install.packages("seqinr")
# Reading fasta files ith seqinr library
# Loading the library
library(seqinr)
getwd()
# Setting up the working directory
# setwd()
file.show("GAPDH_seq.txt")
# Reading a fasta file
dna=read.fasta(file="GAPDH_seq.txt", seqtype="DNA", forceDNAtolower = TRUE)
View(dna)
# Number of sequences
Number_of_sequences=length(dna)
cat("Number of sequences = ", Number_of_sequences)
# Names of sequences
names=getName(dna)
names
# Name of the nth sequence
names[[2]]
# Annotation of sequences
annotation=getAnnot(dna)
annotation
annotation[[1]]
annotation[[2]]
# Length of individua sequences
len_seq=getLength(dna)
len_seq
len_seq[[1]]
# Sequence
getSequence(dna)
seq1=getSequence(dna[[1]],as.string = TRUE)
seq1
dinucleotide_count=count(dna[[1]],2)
print(dinucleotide_count)
trinucleotide_count=count(dna[[2]],3)
print(trinucleotide_count)
# GC content
GC_content=GC(dna[[2]])
print(paste("GC Content = ", GC_content))
print(round(GC_content,3))
GC(dna[[1]])
GC(dna[[2]])
# Sliding window analysis for GC content
# Retrieve sequence as vector of nucleotides
seq1=getSequence(dna[[1]],as.string = TRUE)
print(seq1)
# gc=c()
# count1=count1+1 #gc index
# gc[count1]=subGC #filling up calculated gc fraction
# For the first sequence
seq1=getSequence(dna[[1]],as.string = FALSE)
begin=1
gc=c()
count1=0
count2=0
length(seq1)
while (begin < length(seq1)) # begin 1 end 500
{
end=begin+499 #500
if (end > length(seq1))
{
end=length(seq1)
count2=1
}
subsequence=seq1[begin:end]  #1:500
count1=count1+1
sub_GC=GC(subsequence)
gc[count1]=sub_GC
cat(begin,end,sub_GC, "\n")
if(count2==1)
{break}
begin=end-199 #begin = 500-199=301
}
print(gc)
hist(gc,col="red")
for (i in 1:number_of_sequences)
{
seq1=getSequence(dna[[i]],as.string = FALSE)
print(getName(dna[i]))
print(getAnnot(dna[i]))
begin=1
gc=c()    #initializing empty vector
count1=0  #flag to fill vector gc
length(seq1)
while (begin < length(seq1)) # begin 301 end 800
{
end=begin+499              # begin = 301 end=800
subsequence=seq1[begin:end]
subGC=GC(subsequence)
cat(begin,end,subGC, "\n")
count1=count1+1 #gc index
gc[count1]=subGC #filling up calculated gc fraction
begin=end-199 #begin = 500-199=301 - overlap of 200 bases
}
hist(gc,col="red")
}
# Number of sequences
Number_of_sequences=length(dna)
cat("Number of sequences = ", Number_of_sequences)
for (i in 1:number_of_sequences)
{
seq1=getSequence(dna[[i]],as.string = FALSE)
print(getName(dna[i]))
print(getAnnot(dna[i]))
begin=1
gc=c()    #initializing empty vector
count1=0  #flag to fill vector gc
length(seq1)
while (begin < length(seq1)) # begin 301 end 800
{
end=begin+499              # begin = 301 end=800
subsequence=seq1[begin:end]
subGC=GC(subsequence)
cat(begin,end,subGC, "\n")
count1=count1+1 #gc index
gc[count1]=subGC #filling up calculated gc fraction
begin=end-199 #begin = 500-199=301 - overlap of 200 bases
}
hist(gc,col="red")
for (i in 1:number_of_sequences)
{
seq1=getSequence(dna[[i]],as.string = FALSE)
print(getName(dna[i]))
print(getAnnot(dna[i]))
begin=1
gc=c()    #initializing empty vector
count1=0  #flag to fill vector gc
length(seq1)
while (begin < length(seq1)) # begin 301 end 800
{
end=begin+499              # begin = 301 end=800
subsequence=seq1[begin:end]
subGC=GC(subsequence)
cat(begin,end,subGC, "\n")
count1=count1+1 #gc index
gc[count1]=subGC #filling up calculated gc fraction
begin=end-199 #begin = 500-199=301 - overlap of 200 bases
}
hist(gc,col="red")
}
q
gjgd
u
o
for (i in 1:number_of_sequences)
{
seq1=getSequence(dna[[i]],as.string = FALSE)
print(getName(dna[i]))
print(getAnnot(dna[i]))
begin=1
gc=c()    #initializing empty vector
count1=0  #flag to fill vector gc
length(seq1)
while (begin < length(seq1)) # begin 301 end 800
{
end=begin+499              # begin = 301 end=800
subsequence=seq1[begin:end]
subGC=GC(subsequence)
cat(begin,end,subGC, "\n")
count1=count1+1 #gc index
gc[count1]=subGC #filling up calculated gc fraction
begin=end-199 #begin = 500-199=301 - overlap of 200 bases
}
hist(gc,col="red")
}
for (i in 1:Number_of_sequences)
{
seq1=getSequence(dna[[i]],as.string = FALSE)
print(getName(dna[i]))
print(getAnnot(dna[i]))
begin=1
gc=c()    #initializing empty vector
count1=0  #flag to fill vector gc
length(seq1)
while (begin < length(seq1)) # begin 301 end 800
{
end=begin+499              # begin = 301 end=800
subsequence=seq1[begin:end]
subGC=GC(subsequence)
cat(begin,end,subGC, "\n")
count1=count1+1 #gc index
gc[count1]=subGC #filling up calculated gc fraction
begin=end-199 #begin = 500-199=301 - overlap of 200 bases
}
hist(gc,col="red")
}
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ShortRead")
# Setting up the working directory
# setwd()
file.show("seq.fastq")
# Setting up the working directory
# setwd()
file.show("seq.fastq")
fastq=readFastq("seq.fastq")
# Loading library
library(ShortRead)
fastq=readFastq("seq.fastq")
# fastq summary
fastq
# Number of sequences in file
length(fastq)
number_of_reads=length(fastq)
print(number_of_reads)
# Width -length of individual reads
width(fastq)
readlength=width(fastq)
print(readlength[1:3])
is.vector(readlength)
mean(readlength)
median(readlength)
hist(readlength)
hist(readlength,col="red")
# sread - sequence
sequence=sread(fastq)
print(sequence)
print(sequence[1])
print(sequence[2:4])
# Quality - quality score
quality_scores=quality(fastq)
print(quality_scores)
encoding(quality(fastq))
scores=as(quality_scores,"matrix")
scores
scores[5,1:50]
# id - id of reads
id_of_reads=id(fastq)
id_of_reads[2]
print(id_of_reads)
fastq[1:3]
print(readlength[50:100])
print(readlength[100:150])
fastq[1:5]
print(readlength[100:150])
print(readlength[100:110])
readlength=width(fastq)
print(readlength)
print(readlength[100:110])
fastq[1:5]
print(readlength[100:110])
print(readlength[1000:10010])
fastq[1:5]
print(fastq)
print(readlength[100:110])
readlength=width(fastq)
print(readlength)
print(readlength[1:3])
print(readlength[1:2])
print(sequence[1:2])
print(quality_scores[1:2])
print(id_of_reads[1:2])
seq_length=sequence@ranges@width
seq_length
is.vector(seq_length)
mean_score_per_sequence=rowMeans(scores,na.rm=TRUE)
mean_score_per_sequence
mean_score_per_position=colMeans(scores,na.rm=TRUE)
mean_score_per_position
num1=c(1,2,3,4,NA,5)
mean(num1,na.rm=TRUE)
num2=c(1,2,3,4,NA,5)
mean(num2)
boxplot(scores[,1:20],xlab="Position",ylab="Phread score")
